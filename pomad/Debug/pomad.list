
pomad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000148  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000318  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000318  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b3b  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000284  00000000  00000000  00010e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  00011108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  000111a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c170  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a5d  00000000  00000000  0002d370  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a8a0  00000000  00000000  0002ddcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c866d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000110  00000000  00000000  000c86e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080002f8 	.word	0x080002f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080002f8 	.word	0x080002f8

08000208 <main>:
//#define INPUTCAPTURE_PROG

// Main program

void main()
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
void main()
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	607b      	str	r3, [r7, #4]
			BSP_DELAY_TIM_ms(2);
		}
	}
#endif

}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  // HAL_IncTick();
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <SystemInit+0x28>)
 8000236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023a:	4a07      	ldr	r2, [pc, #28]	; (8000258 <SystemInit+0x28>)
 800023c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <SystemInit+0x28>)
 8000246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800024a:	609a      	str	r2, [r3, #8]
#endif
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800025c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000294 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000262:	e003      	b.n	800026c <LoopCopyDataInit>

08000264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800026a:	3104      	adds	r1, #4

0800026c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000274:	d3f6      	bcc.n	8000264 <CopyDataInit>
  ldr  r2, =_sbss
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000278:	e002      	b.n	8000280 <LoopFillZerobss>

0800027a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800027a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800027c:	f842 3b04 	str.w	r3, [r2], #4

08000280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000284:	d3f9      	bcc.n	800027a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000286:	f7ff ffd3 	bl	8000230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800028e:	f7ff ffbb 	bl	8000208 <main>
  bx  lr    
 8000292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000294:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000298:	08000318 	.word	0x08000318
  ldr  r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	4e0d      	ldr	r6, [pc, #52]	; (80002e8 <__libc_init_array+0x38>)
 80002b4:	4c0d      	ldr	r4, [pc, #52]	; (80002ec <__libc_init_array+0x3c>)
 80002b6:	1ba4      	subs	r4, r4, r6
 80002b8:	10a4      	asrs	r4, r4, #2
 80002ba:	2500      	movs	r5, #0
 80002bc:	42a5      	cmp	r5, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	4e0b      	ldr	r6, [pc, #44]	; (80002f0 <__libc_init_array+0x40>)
 80002c2:	4c0c      	ldr	r4, [pc, #48]	; (80002f4 <__libc_init_array+0x44>)
 80002c4:	f000 f818 	bl	80002f8 <_init>
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	2500      	movs	r5, #0
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002d8:	4798      	blx	r3
 80002da:	3501      	adds	r5, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e2:	4798      	blx	r3
 80002e4:	3501      	adds	r5, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
