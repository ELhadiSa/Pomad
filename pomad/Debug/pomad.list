
pomad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000738  08000738  00010738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000748  08000748  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000748  08000748  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000748  08000748  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000748  08000748  00010748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800074c  0800074c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000754  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000754  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001080  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000037d  00000000  00000000  000210b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e8  00000000  00000000  00021438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00021520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b7e6  00000000  00000000  000215c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000f95  00000000  00000000  0003cda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a92f  00000000  00000000  0003dd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d866a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000200  00000000  00000000  000d86e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000720 	.word	0x08000720

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08000720 	.word	0x08000720

08000208 <main>:


// Main program

void main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	uint8_t	i, sent;

	// Configure System Clock
	SystemClock_Config();
 800020e:	f000 f825 	bl	800025c <SystemClock_Config>

	// Initialize LED & Button pin
	BSP_LED_Init();
 8000212:	f000 f979 	bl	8000508 <BSP_LED_Init>
	BSP_PB_Init();
 8000216:	f000 f9cd 	bl	80005b4 <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 800021a:	f000 fa05 	bl	8000628 <BSP_Console_Init>

	// Main loop
	while(1)
	{
		// If User-Button is pushed down
		if (BSP_PB_GetState() == 1)
 800021e:	f000 f9eb 	bl	80005f8 <BSP_PB_GetState>
 8000222:	4603      	mov	r3, r0
 8000224:	2b01      	cmp	r3, #1
 8000226:	d111      	bne.n	800024c <main+0x44>
		{
			BSP_LED_On();	// Keep LED On
 8000228:	f000 f9aa 	bl	8000580 <BSP_LED_On>

			// Send '#' only once
			if (sent == 0)
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1f5      	bne.n	800021e <main+0x16>
			{
				while ((USART3->ISR & USART_ISR_TC) != USART_ISR_TC);
 8000232:	bf00      	nop
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <main+0x50>)
 8000236:	69db      	ldr	r3, [r3, #28]
 8000238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800023c:	2b40      	cmp	r3, #64	; 0x40
 800023e:	d1f9      	bne.n	8000234 <main+0x2c>
				USART3->TDR = 'B';
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <main+0x50>)
 8000242:	2242      	movs	r2, #66	; 0x42
 8000244:	629a      	str	r2, [r3, #40]	; 0x28
				sent = 1;
 8000246:	2301      	movs	r3, #1
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	e7e8      	b.n	800021e <main+0x16>
		}

		// If User-Button is released
		else
		{
			BSP_LED_Off();	// Keep LED Off
 800024c:	f000 f9a4 	bl	8000598 <BSP_LED_Off>
			sent = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	71fb      	strb	r3, [r7, #7]
		if (BSP_PB_GetState() == 1)
 8000254:	e7e3      	b.n	800021e <main+0x16>
 8000256:	bf00      	nop
 8000258:	40004800 	.word	0x40004800

0800025c <SystemClock_Config>:
		}
	}
}


void SystemClock_Config(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
	 * HSI CONF to get 48MHZ using PLL  48=16/10*240/8/1/1
	 */
		uint32_t 	HSI_Status;
		uint32_t	PLL_Status;
		uint32_t	SW_Status;
		uint32_t	timeout = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]

		timeout = 1000000;
 8000266:	4b43      	ldr	r3, [pc, #268]	; (8000374 <SystemClock_Config+0x118>)
 8000268:	60fb      	str	r3, [r7, #12]

		// Start HSI

		RCC->CR |= RCC_CR_HSION;
 800026a:	4b43      	ldr	r3, [pc, #268]	; (8000378 <SystemClock_Config+0x11c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a42      	ldr	r2, [pc, #264]	; (8000378 <SystemClock_Config+0x11c>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6013      	str	r3, [r2, #0]


		do
			{
				HSI_Status = RCC->CR & RCC_CR_HSIRDY_Msk;
 8000276:	4b40      	ldr	r3, [pc, #256]	; (8000378 <SystemClock_Config+0x11c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0302 	and.w	r3, r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
				timeout--;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3b01      	subs	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
			} while ((HSI_Status == 0) && (timeout > 0));
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d102      	bne.n	8000292 <SystemClock_Config+0x36>
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1f1      	bne.n	8000276 <SystemClock_Config+0x1a>

		// Main PLL Configuration PLLM/10 PLLNx240 PLLP/8


		//PLLM
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8000292:	4b39      	ldr	r3, [pc, #228]	; (8000378 <SystemClock_Config+0x11c>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	4a38      	ldr	r2, [pc, #224]	; (8000378 <SystemClock_Config+0x11c>)
 8000298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800029c:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (0xA <<RCC_PLLCFGR_PLLM_Pos);
 800029e:	4b36      	ldr	r3, [pc, #216]	; (8000378 <SystemClock_Config+0x11c>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4a35      	ldr	r2, [pc, #212]	; (8000378 <SystemClock_Config+0x11c>)
 80002a4:	f043 030a 	orr.w	r3, r3, #10
 80002a8:	6053      	str	r3, [r2, #4]

		//PLLN
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 80002aa:	4b33      	ldr	r3, [pc, #204]	; (8000378 <SystemClock_Config+0x11c>)
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	4932      	ldr	r1, [pc, #200]	; (8000378 <SystemClock_Config+0x11c>)
 80002b0:	4b32      	ldr	r3, [pc, #200]	; (800037c <SystemClock_Config+0x120>)
 80002b2:	4013      	ands	r3, r2
 80002b4:	604b      	str	r3, [r1, #4]
		RCC->PLLCFGR |= (0xF0 <<RCC_PLLCFGR_PLLN_Pos);
 80002b6:	4b30      	ldr	r3, [pc, #192]	; (8000378 <SystemClock_Config+0x11c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a2f      	ldr	r2, [pc, #188]	; (8000378 <SystemClock_Config+0x11c>)
 80002bc:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80002c0:	6053      	str	r3, [r2, #4]

		//PLLP
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <SystemClock_Config+0x11c>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a2c      	ldr	r2, [pc, #176]	; (8000378 <SystemClock_Config+0x11c>)
 80002c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002cc:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (0x3 <<RCC_PLLCFGR_PLLP_Pos);
 80002ce:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <SystemClock_Config+0x11c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4a29      	ldr	r2, [pc, #164]	; (8000378 <SystemClock_Config+0x11c>)
 80002d4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002d8:	6053      	str	r3, [r2, #4]

		// Main PLL activation

		RCC->CR |= RCC_CR_PLLON;
 80002da:	4b27      	ldr	r3, [pc, #156]	; (8000378 <SystemClock_Config+0x11c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a26      	ldr	r2, [pc, #152]	; (8000378 <SystemClock_Config+0x11c>)
 80002e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e4:	6013      	str	r3, [r2, #0]
		do
				{
					PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <SystemClock_Config+0x11c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ee:	607b      	str	r3, [r7, #4]
					timeout--;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	60fb      	str	r3, [r7, #12]
				} while ((PLL_Status == 0) && (timeout > 0));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <SystemClock_Config+0xa6>
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d1f1      	bne.n	80002e6 <SystemClock_Config+0x8a>


		//APB1 and AHB1 Conf /1 /1
		RCC->CFGR &= RCC_CFGR_PPRE1_Msk;
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <SystemClock_Config+0x11c>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	4a1c      	ldr	r2, [pc, #112]	; (8000378 <SystemClock_Config+0x11c>)
 8000308:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800030c:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <SystemClock_Config+0x11c>)
 8000310:	4a19      	ldr	r2, [pc, #100]	; (8000378 <SystemClock_Config+0x11c>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	6093      	str	r3, [r2, #8]

		RCC->CFGR &= RCC_CFGR_HPRE_Msk;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <SystemClock_Config+0x11c>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	4a17      	ldr	r2, [pc, #92]	; (8000378 <SystemClock_Config+0x11c>)
 800031c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000320:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <SystemClock_Config+0x11c>)
 8000324:	4a14      	ldr	r2, [pc, #80]	; (8000378 <SystemClock_Config+0x11c>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	6093      	str	r3, [r2, #8]

		// Enable FLASH Prefetch Buffer and set Flash Latency
		FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY;
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <SystemClock_Config+0x124>)
 800032c:	f240 120f 	movw	r2, #271	; 0x10f
 8000330:	601a      	str	r2, [r3, #0]

		/* --- Until this point, MCU was still clocked by HSI at 8MHz ---*/
		/* --- Switching to PLL at 48MHz Now!  Fasten your seat belt! ---*/

		// Select the main PLL as system clock source
		RCC->CFGR &= ~RCC_CFGR_SW;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <SystemClock_Config+0x11c>)
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	4a10      	ldr	r2, [pc, #64]	; (8000378 <SystemClock_Config+0x11c>)
 8000338:	f023 0303 	bic.w	r3, r3, #3
 800033c:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <SystemClock_Config+0x11c>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <SystemClock_Config+0x11c>)
 8000344:	f043 0302 	orr.w	r3, r3, #2
 8000348:	6093      	str	r3, [r2, #8]
//
		// Wait until PLL becomes main switch input
		do
		{
			SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <SystemClock_Config+0x11c>)
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f003 030c 	and.w	r3, r3, #12
 8000352:	603b      	str	r3, [r7, #0]
			timeout--;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3b01      	subs	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
		} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	2b08      	cmp	r3, #8
 800035e:	d002      	beq.n	8000366 <SystemClock_Config+0x10a>
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f1      	bne.n	800034a <SystemClock_Config+0xee>
//		// Set to AF0 (MCO output)
//		GPIOA->AFR[1] &= ~(0x0000000F);
//		GPIOA->AFR[1] |=  (0x00000000);
//
//		// Update SystemCoreClock global variable
		SystemCoreClockUpdate();
 8000366:	f000 f82b 	bl	80003c0 <SystemCoreClockUpdate>

}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	000f4240 	.word	0x000f4240
 8000378:	40023800 	.word	0x40023800
 800037c:	ffff803f 	.word	0xffff803f
 8000380:	40023c00 	.word	0x40023c00

08000384 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  // HAL_IncTick();
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <SystemInit+0x28>)
 800039a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <SystemInit+0x28>)
 80003a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <SystemInit+0x28>)
 80003aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003ae:	609a      	str	r2, [r3, #8]
#endif
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
 80003ce:	2302      	movs	r3, #2
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	2300      	movs	r3, #0
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	2302      	movs	r3, #2
 80003d8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003da:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	f003 030c 	and.w	r3, r3, #12
 80003e2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	d007      	beq.n	80003fa <SystemCoreClockUpdate+0x3a>
 80003ea:	2b08      	cmp	r3, #8
 80003ec:	d009      	beq.n	8000402 <SystemCoreClockUpdate+0x42>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d13d      	bne.n	800046e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80003f2:	4b2c      	ldr	r3, [pc, #176]	; (80004a4 <SystemCoreClockUpdate+0xe4>)
 80003f4:	4a2c      	ldr	r2, [pc, #176]	; (80004a8 <SystemCoreClockUpdate+0xe8>)
 80003f6:	601a      	str	r2, [r3, #0]
      break;
 80003f8:	e03d      	b.n	8000476 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003fa:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <SystemCoreClockUpdate+0xe4>)
 80003fc:	4a2b      	ldr	r2, [pc, #172]	; (80004ac <SystemCoreClockUpdate+0xec>)
 80003fe:	601a      	str	r2, [r3, #0]
      break;
 8000400:	e039      	b.n	8000476 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	0d9b      	lsrs	r3, r3, #22
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800040e:	4b24      	ldr	r3, [pc, #144]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000416:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d00c      	beq.n	8000438 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800041e:	4a23      	ldr	r2, [pc, #140]	; (80004ac <SystemCoreClockUpdate+0xec>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	fbb2 f3f3 	udiv	r3, r2, r3
 8000426:	4a1e      	ldr	r2, [pc, #120]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 8000428:	6852      	ldr	r2, [r2, #4]
 800042a:	0992      	lsrs	r2, r2, #6
 800042c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000430:	fb02 f303 	mul.w	r3, r2, r3
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	e00b      	b.n	8000450 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <SystemCoreClockUpdate+0xe8>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 8000442:	6852      	ldr	r2, [r2, #4]
 8000444:	0992      	lsrs	r2, r2, #6
 8000446:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800044a:	fb02 f303 	mul.w	r3, r2, r3
 800044e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	0c1b      	lsrs	r3, r3, #16
 8000456:	f003 0303 	and.w	r3, r3, #3
 800045a:	3301      	adds	r3, #1
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000460:	697a      	ldr	r2, [r7, #20]
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	fbb2 f3f3 	udiv	r3, r2, r3
 8000468:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <SystemCoreClockUpdate+0xe4>)
 800046a:	6013      	str	r3, [r2, #0]
      break;
 800046c:	e003      	b.n	8000476 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <SystemCoreClockUpdate+0xe4>)
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <SystemCoreClockUpdate+0xe8>)
 8000472:	601a      	str	r2, [r3, #0]
      break;
 8000474:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <SystemCoreClockUpdate+0xe0>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	091b      	lsrs	r3, r3, #4
 800047c:	f003 030f 	and.w	r3, r3, #15
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <SystemCoreClockUpdate+0xf0>)
 8000482:	5cd3      	ldrb	r3, [r2, r3]
 8000484:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <SystemCoreClockUpdate+0xe4>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	fa22 f303 	lsr.w	r3, r2, r3
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <SystemCoreClockUpdate+0xe4>)
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	371c      	adds	r7, #28
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40023800 	.word	0x40023800
 80004a4:	20000000 	.word	0x20000000
 80004a8:	00f42400 	.word	0x00f42400
 80004ac:	017d7840 	.word	0x017d7840
 80004b0:	08000738 	.word	0x08000738

080004b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004ba:	e003      	b.n	80004c4 <LoopCopyDataInit>

080004bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004c2:	3104      	adds	r1, #4

080004c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004cc:	d3f6      	bcc.n	80004bc <CopyDataInit>
  ldr  r2, =_sbss
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004d0:	e002      	b.n	80004d8 <LoopFillZerobss>

080004d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004d4:	f842 3b04 	str.w	r3, [r2], #4

080004d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004dc:	d3f9      	bcc.n	80004d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004de:	f7ff ff59 	bl	8000394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f000 f8f9 	bl	80006d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004e6:	f7ff fe8f 	bl	8000208 <main>
  bx  lr    
 80004ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80004f0:	08000750 	.word	0x08000750
  ldr  r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004f8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80004fc:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000500:	20000020 	.word	0x20000020

08000504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC_IRQHandler>
	...

08000508 <BSP_LED_Init>:
 * Initialize LED pin (PB7) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <BSP_LED_Init+0x70>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000510:	4a19      	ldr	r2, [pc, #100]	; (8000578 <BSP_LED_Init+0x70>)
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB7 as output
	GPIOB->MODER &= ~GPIO_MODER_MODER7_Msk;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <BSP_LED_Init+0x74>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a17      	ldr	r2, [pc, #92]	; (800057c <BSP_LED_Init+0x74>)
 800051e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000522:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x01 <<GPIO_MODER_MODER7_Pos);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <BSP_LED_Init+0x74>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <BSP_LED_Init+0x74>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052e:	6013      	str	r3, [r2, #0]

	// Configure PB7 as Push-Pull output
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_7;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <BSP_LED_Init+0x74>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	4a11      	ldr	r2, [pc, #68]	; (800057c <BSP_LED_Init+0x74>)
 8000536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800053a:	6053      	str	r3, [r2, #4]

	// Configure PB7 as High-Speed Output
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR7_Msk;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <BSP_LED_Init+0x74>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <BSP_LED_Init+0x74>)
 8000542:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000546:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR7_Pos);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <BSP_LED_Init+0x74>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <BSP_LED_Init+0x74>)
 800054e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000552:	6093      	str	r3, [r2, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR7_Msk;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <BSP_LED_Init+0x74>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <BSP_LED_Init+0x74>)
 800055a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800055e:	60d3      	str	r3, [r2, #12]

	// Set Initial State OFF
	GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <BSP_LED_Init+0x74>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a05      	ldr	r2, [pc, #20]	; (800057c <BSP_LED_Init+0x74>)
 8000566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800056a:	6193      	str	r3, [r2, #24]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40023800 	.word	0x40023800
 800057c:	40020400 	.word	0x40020400

08000580 <BSP_LED_On>:
 * BSP_LED_On()
 * Turn ON LED on PB7
 */

void BSP_LED_On()
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	GPIOB->BSRR = GPIO_BSRR_BS_7;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <BSP_LED_On+0x14>)
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	619a      	str	r2, [r3, #24]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40020400 	.word	0x40020400

08000598 <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn OFF LED on PB7
 */

void BSP_LED_Off()
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	GPIOB->BSRR = GPIO_BSRR_BR_7;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <BSP_LED_Off+0x18>)
 800059e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005a2:	619a      	str	r2, [r3, #24]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40020400 	.word	0x40020400

080005b4 <BSP_PB_Init>:
 * BSP_PB_Init()
 * Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 */

void BSP_PB_Init()
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <BSP_PB_Init+0x3c>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <BSP_PB_Init+0x3c>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <BSP_PB_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <BSP_PB_Init+0x40>)
 80005ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80005ce:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <BSP_PB_Init+0x40>)
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <BSP_PB_Init+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6013      	str	r3, [r2, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <BSP_PB_Init+0x40>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <BSP_PB_Init+0x40>)
 80005de:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020800 	.word	0x40020800

080005f8 <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t BSP_PB_GetState()
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	uint8_t state;

	if ((GPIOC->IDR & GPIO_IDR_ID13) == GPIO_IDR_ID13)
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <BSP_PB_GetState+0x2c>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800060a:	d102      	bne.n	8000612 <BSP_PB_GetState+0x1a>
	{
		state = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	e001      	b.n	8000616 <BSP_PB_GetState+0x1e>
	}
	else
	{
		state = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	71fb      	strb	r3, [r7, #7]
	}

	return state;
 8000616:	79fb      	ldrb	r3, [r7, #7]
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40020800 	.word	0x40020800

08000628 <BSP_Console_Init>:
 * TX -> PD8 (AF7)
 * RX -> PD9 (AF7)
 */

void BSP_Console_Init()
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <BSP_Console_Init+0xa4>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <BSP_Console_Init+0xa4>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6313      	str	r3, [r2, #48]	; 0x30

//	// Configure PD8 and PD9 as Alternate function
	GPIOD->MODER &= ~(GPIO_MODER_MODER8_Msk | GPIO_MODER_MODER9_Msk);
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <BSP_Console_Init+0xa8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <BSP_Console_Init+0xa8>)
 800063e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000642:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos) | (0x02 <<GPIO_MODER_MODER9_Pos);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <BSP_Console_Init+0xa8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <BSP_Console_Init+0xa8>)
 800064a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800064e:	6013      	str	r3, [r2, #0]

//	// Set PD8 and PD9 to AF7 (USART3)
	GPIOD->AFR[1] &=  ~(0x000000FF);
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <BSP_Console_Init+0xa8>)
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <BSP_Console_Init+0xa8>)
 8000656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800065a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |=   (0x00000077);
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <BSP_Console_Init+0xa8>)
 800065e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <BSP_Console_Init+0xa8>)
 8000662:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000666:	6253      	str	r3, [r2, #36]	; 0x24
//
	// Enable USART3 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <BSP_Console_Init+0xa4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a17      	ldr	r2, [pc, #92]	; (80006cc <BSP_Console_Init+0xa4>)
 800066e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
//
	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART3->CR1 = 0x00000000;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <BSP_Console_Init+0xac>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
	USART3->CR2 = 0x00000000;
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <BSP_Console_Init+0xac>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
	USART3->CR3 = 0x00000000;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <BSP_Console_Init+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
//
	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_USART3SEL_Msk;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <BSP_Console_Init+0xa4>)
 8000688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068c:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <BSP_Console_Init+0xa4>)
 800068e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)
//
	USART3->CR1 |= USART_CR1_OVER8;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <BSP_Console_Init+0xac>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <BSP_Console_Init+0xac>)
 800069c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a0:	6013      	str	r3, [r2, #0]
	USART3->BRR = 833;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <BSP_Console_Init+0xac>)
 80006a4:	f240 3241 	movw	r2, #833	; 0x341
 80006a8:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <BSP_Console_Init+0xac>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a09      	ldr	r2, [pc, #36]	; (80006d4 <BSP_Console_Init+0xac>)
 80006b0:	f043 030c 	orr.w	r3, r3, #12
 80006b4:	6013      	str	r3, [r2, #0]

	// Enable USART3
	USART3->CR1 |= USART_CR1_UE;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <BSP_Console_Init+0xac>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <BSP_Console_Init+0xac>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020c00 	.word	0x40020c00
 80006d4:	40004800 	.word	0x40004800

080006d8 <__libc_init_array>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	4e0d      	ldr	r6, [pc, #52]	; (8000710 <__libc_init_array+0x38>)
 80006dc:	4c0d      	ldr	r4, [pc, #52]	; (8000714 <__libc_init_array+0x3c>)
 80006de:	1ba4      	subs	r4, r4, r6
 80006e0:	10a4      	asrs	r4, r4, #2
 80006e2:	2500      	movs	r5, #0
 80006e4:	42a5      	cmp	r5, r4
 80006e6:	d109      	bne.n	80006fc <__libc_init_array+0x24>
 80006e8:	4e0b      	ldr	r6, [pc, #44]	; (8000718 <__libc_init_array+0x40>)
 80006ea:	4c0c      	ldr	r4, [pc, #48]	; (800071c <__libc_init_array+0x44>)
 80006ec:	f000 f818 	bl	8000720 <_init>
 80006f0:	1ba4      	subs	r4, r4, r6
 80006f2:	10a4      	asrs	r4, r4, #2
 80006f4:	2500      	movs	r5, #0
 80006f6:	42a5      	cmp	r5, r4
 80006f8:	d105      	bne.n	8000706 <__libc_init_array+0x2e>
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000700:	4798      	blx	r3
 8000702:	3501      	adds	r5, #1
 8000704:	e7ee      	b.n	80006e4 <__libc_init_array+0xc>
 8000706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800070a:	4798      	blx	r3
 800070c:	3501      	adds	r5, #1
 800070e:	e7f2      	b.n	80006f6 <__libc_init_array+0x1e>
 8000710:	08000748 	.word	0x08000748
 8000714:	08000748 	.word	0x08000748
 8000718:	08000748 	.word	0x08000748
 800071c:	0800074c 	.word	0x0800074c

08000720 <_init>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	bf00      	nop
 8000724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000726:	bc08      	pop	{r3}
 8000728:	469e      	mov	lr, r3
 800072a:	4770      	bx	lr

0800072c <_fini>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	bf00      	nop
 8000730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000732:	bc08      	pop	{r3}
 8000734:	469e      	mov	lr, r3
 8000736:	4770      	bx	lr
