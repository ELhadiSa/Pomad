
pomad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000048c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000654  08000654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000664  08000664  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000664  08000664  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000664  08000664  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000668  08000668  00010668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800066c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000670  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000670  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001788  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004bf  00000000  00000000  000217bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  00021c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d8  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c316  00000000  00000000  00021e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000014c6  00000000  00000000  0003e19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009aaaf  00000000  00000000  0003f664  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e4  00000000  00000000  000da190  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800063c 	.word	0x0800063c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	0800063c 	.word	0x0800063c

08000208 <main>:
uint16_t	TIM6_UIF;

// Main program

void main()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	// Configure System Clock
	SystemClock_Config();
 800020c:	f000 f80a 	bl	8000224 <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8000210:	f000 f95e 	bl	80004d0 <BSP_LED_Init>

	// Initialize Timer for delays
	BSP_DELAY_TIM_init();
 8000214:	f000 f9a8 	bl	8000568 <BSP_DELAY_TIM_init>

	while(1)
	{
		// Toggle LED
		BSP_LED_Toggle();
 8000218:	f000 f996 	bl	8000548 <BSP_LED_Toggle>

		// Wait for 200ms
		BSP_DELAY_TIM_ms(200);
 800021c:	20c8      	movs	r0, #200	; 0xc8
 800021e:	f000 f9c3 	bl	80005a8 <BSP_DELAY_TIM_ms>
		BSP_LED_Toggle();
 8000222:	e7f9      	b.n	8000218 <main+0x10>

08000224 <SystemClock_Config>:
	}
}


 void SystemClock_Config(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	 * HSI CONF to get 48MHZ using PLL  48=16/10*240/8/1/1
	 */
		uint32_t 	HSI_Status;
		uint32_t	PLL_Status;
		uint32_t	SW_Status;
		uint32_t	timeout = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]

		timeout = 1000000;
 800022e:	4b43      	ldr	r3, [pc, #268]	; (800033c <SystemClock_Config+0x118>)
 8000230:	60fb      	str	r3, [r7, #12]

		// Start HSI

		RCC->CR |= RCC_CR_HSION;
 8000232:	4b43      	ldr	r3, [pc, #268]	; (8000340 <SystemClock_Config+0x11c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a42      	ldr	r2, [pc, #264]	; (8000340 <SystemClock_Config+0x11c>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6013      	str	r3, [r2, #0]


		do
			{
				HSI_Status = RCC->CR & RCC_CR_HSIRDY_Msk;
 800023e:	4b40      	ldr	r3, [pc, #256]	; (8000340 <SystemClock_Config+0x11c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	60bb      	str	r3, [r7, #8]
				timeout--;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	3b01      	subs	r3, #1
 800024c:	60fb      	str	r3, [r7, #12]
			} while ((HSI_Status == 0) && (timeout > 0));
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d102      	bne.n	800025a <SystemClock_Config+0x36>
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f1      	bne.n	800023e <SystemClock_Config+0x1a>

		// Main PLL Configuration PLLM/10 PLLNx240 PLLP/8


		//PLLM
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 800025a:	4b39      	ldr	r3, [pc, #228]	; (8000340 <SystemClock_Config+0x11c>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	4a38      	ldr	r2, [pc, #224]	; (8000340 <SystemClock_Config+0x11c>)
 8000260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000264:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (0xA <<RCC_PLLCFGR_PLLM_Pos);
 8000266:	4b36      	ldr	r3, [pc, #216]	; (8000340 <SystemClock_Config+0x11c>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a35      	ldr	r2, [pc, #212]	; (8000340 <SystemClock_Config+0x11c>)
 800026c:	f043 030a 	orr.w	r3, r3, #10
 8000270:	6053      	str	r3, [r2, #4]

		//PLLN
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <SystemClock_Config+0x11c>)
 8000274:	685a      	ldr	r2, [r3, #4]
 8000276:	4932      	ldr	r1, [pc, #200]	; (8000340 <SystemClock_Config+0x11c>)
 8000278:	4b32      	ldr	r3, [pc, #200]	; (8000344 <SystemClock_Config+0x120>)
 800027a:	4013      	ands	r3, r2
 800027c:	604b      	str	r3, [r1, #4]
		RCC->PLLCFGR |= (0xF0 <<RCC_PLLCFGR_PLLN_Pos);
 800027e:	4b30      	ldr	r3, [pc, #192]	; (8000340 <SystemClock_Config+0x11c>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a2f      	ldr	r2, [pc, #188]	; (8000340 <SystemClock_Config+0x11c>)
 8000284:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000288:	6053      	str	r3, [r2, #4]

		//PLLP
		RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 800028a:	4b2d      	ldr	r3, [pc, #180]	; (8000340 <SystemClock_Config+0x11c>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a2c      	ldr	r2, [pc, #176]	; (8000340 <SystemClock_Config+0x11c>)
 8000290:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000294:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (0x3 <<RCC_PLLCFGR_PLLP_Pos);
 8000296:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <SystemClock_Config+0x11c>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	4a29      	ldr	r2, [pc, #164]	; (8000340 <SystemClock_Config+0x11c>)
 800029c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002a0:	6053      	str	r3, [r2, #4]

		// Main PLL activation

		RCC->CR |= RCC_CR_PLLON;
 80002a2:	4b27      	ldr	r3, [pc, #156]	; (8000340 <SystemClock_Config+0x11c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a26      	ldr	r2, [pc, #152]	; (8000340 <SystemClock_Config+0x11c>)
 80002a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ac:	6013      	str	r3, [r2, #0]
		do
				{
					PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80002ae:	4b24      	ldr	r3, [pc, #144]	; (8000340 <SystemClock_Config+0x11c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002b6:	607b      	str	r3, [r7, #4]
					timeout--;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
				} while ((PLL_Status == 0) && (timeout > 0));
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d102      	bne.n	80002ca <SystemClock_Config+0xa6>
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1f1      	bne.n	80002ae <SystemClock_Config+0x8a>


		//APB1 and AHB1 Conf /1 /1
		RCC->CFGR &= RCC_CFGR_PPRE1_Msk;
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <SystemClock_Config+0x11c>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <SystemClock_Config+0x11c>)
 80002d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80002d4:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <SystemClock_Config+0x11c>)
 80002d8:	4a19      	ldr	r2, [pc, #100]	; (8000340 <SystemClock_Config+0x11c>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	6093      	str	r3, [r2, #8]

		RCC->CFGR &= RCC_CFGR_HPRE_Msk;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <SystemClock_Config+0x11c>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	4a17      	ldr	r2, [pc, #92]	; (8000340 <SystemClock_Config+0x11c>)
 80002e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002e8:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002ea:	4b15      	ldr	r3, [pc, #84]	; (8000340 <SystemClock_Config+0x11c>)
 80002ec:	4a14      	ldr	r2, [pc, #80]	; (8000340 <SystemClock_Config+0x11c>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	6093      	str	r3, [r2, #8]

		// Enable FLASH Prefetch Buffer and set Flash Latency
		FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY;
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <SystemClock_Config+0x124>)
 80002f4:	f240 120f 	movw	r2, #271	; 0x10f
 80002f8:	601a      	str	r2, [r3, #0]

		/* --- Until this point, MCU was still clocked by HSI at 8MHz ---*/
		/* --- Switching to PLL at 48MHz Now!  Fasten your seat belt! ---*/

		// Select the main PLL as system clock source
		RCC->CFGR &= ~RCC_CFGR_SW;
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <SystemClock_Config+0x11c>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a10      	ldr	r2, [pc, #64]	; (8000340 <SystemClock_Config+0x11c>)
 8000300:	f023 0303 	bic.w	r3, r3, #3
 8000304:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <SystemClock_Config+0x11c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <SystemClock_Config+0x11c>)
 800030c:	f043 0302 	orr.w	r3, r3, #2
 8000310:	6093      	str	r3, [r2, #8]
//
		// Wait until PLL becomes main switch input
		do
		{
			SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SystemClock_Config+0x11c>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	f003 030c 	and.w	r3, r3, #12
 800031a:	603b      	str	r3, [r7, #0]
			timeout--;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3b01      	subs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
		} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b08      	cmp	r3, #8
 8000326:	d002      	beq.n	800032e <SystemClock_Config+0x10a>
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1f1      	bne.n	8000312 <SystemClock_Config+0xee>
//		GPIOA->AFR[1] &= ~(0x0000000F);
//		GPIOA->AFR[1] |=  (0x00000000);
//

//		// Update SystemCoreClock global variable
		SystemCoreClockUpdate();
 800032e:	f000 f82b 	bl	8000388 <SystemCoreClockUpdate>

}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	000f4240 	.word	0x000f4240
 8000340:	40023800 	.word	0x40023800
 8000344:	ffff803f 	.word	0xffff803f
 8000348:	40023c00 	.word	0x40023c00

0800034c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  // HAL_IncTick();
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <SystemInit+0x28>)
 8000362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <SystemInit+0x28>)
 8000368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800036c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <SystemInit+0x28>)
 8000372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000376:	609a      	str	r2, [r3, #8]
#endif
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b087      	sub	sp, #28
 800038c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	2302      	movs	r3, #2
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	2302      	movs	r3, #2
 80003a0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	f003 030c 	and.w	r3, r3, #12
 80003aa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d007      	beq.n	80003c2 <SystemCoreClockUpdate+0x3a>
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d009      	beq.n	80003ca <SystemCoreClockUpdate+0x42>
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d13d      	bne.n	8000436 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <SystemCoreClockUpdate+0xe4>)
 80003bc:	4a2c      	ldr	r2, [pc, #176]	; (8000470 <SystemCoreClockUpdate+0xe8>)
 80003be:	601a      	str	r2, [r3, #0]
      break;
 80003c0:	e03d      	b.n	800043e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003c2:	4b2a      	ldr	r3, [pc, #168]	; (800046c <SystemCoreClockUpdate+0xe4>)
 80003c4:	4a2b      	ldr	r2, [pc, #172]	; (8000474 <SystemCoreClockUpdate+0xec>)
 80003c6:	601a      	str	r2, [r3, #0]
      break;
 80003c8:	e039      	b.n	800043e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	0d9b      	lsrs	r3, r3, #22
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003d6:	4b24      	ldr	r3, [pc, #144]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003de:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d00c      	beq.n	8000400 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003e6:	4a23      	ldr	r2, [pc, #140]	; (8000474 <SystemCoreClockUpdate+0xec>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ee:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 80003f0:	6852      	ldr	r2, [r2, #4]
 80003f2:	0992      	lsrs	r2, r2, #6
 80003f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003f8:	fb02 f303 	mul.w	r3, r2, r3
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	e00b      	b.n	8000418 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000400:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <SystemCoreClockUpdate+0xe8>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	fbb2 f3f3 	udiv	r3, r2, r3
 8000408:	4a17      	ldr	r2, [pc, #92]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 800040a:	6852      	ldr	r2, [r2, #4]
 800040c:	0992      	lsrs	r2, r2, #6
 800040e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000412:	fb02 f303 	mul.w	r3, r2, r3
 8000416:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	0c1b      	lsrs	r3, r3, #16
 800041e:	f003 0303 	and.w	r3, r3, #3
 8000422:	3301      	adds	r3, #1
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <SystemCoreClockUpdate+0xe4>)
 8000432:	6013      	str	r3, [r2, #0]
      break;
 8000434:	e003      	b.n	800043e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000436:	4b0d      	ldr	r3, [pc, #52]	; (800046c <SystemCoreClockUpdate+0xe4>)
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <SystemCoreClockUpdate+0xe8>)
 800043a:	601a      	str	r2, [r3, #0]
      break;
 800043c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <SystemCoreClockUpdate+0xe0>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	091b      	lsrs	r3, r3, #4
 8000444:	f003 030f 	and.w	r3, r3, #15
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <SystemCoreClockUpdate+0xf0>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <SystemCoreClockUpdate+0xe4>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	fa22 f303 	lsr.w	r3, r2, r3
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <SystemCoreClockUpdate+0xe4>)
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	371c      	adds	r7, #28
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40023800 	.word	0x40023800
 800046c:	20000000 	.word	0x20000000
 8000470:	00f42400 	.word	0x00f42400
 8000474:	017d7840 	.word	0x017d7840
 8000478:	08000654 	.word	0x08000654

0800047c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800047c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000480:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000482:	e003      	b.n	800048c <LoopCopyDataInit>

08000484 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000486:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000488:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800048a:	3104      	adds	r1, #4

0800048c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000490:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000492:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000494:	d3f6      	bcc.n	8000484 <CopyDataInit>
  ldr  r2, =_sbss
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000498:	e002      	b.n	80004a0 <LoopFillZerobss>

0800049a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800049a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800049c:	f842 3b04 	str.w	r3, [r2], #4

080004a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004a4:	d3f9      	bcc.n	800049a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004a6:	f7ff ff59 	bl	800035c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f000 f8a3 	bl	80005f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ae:	f7ff feab 	bl	8000208 <main>
  bx  lr    
 80004b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004b4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80004b8:	0800066c 	.word	0x0800066c
  ldr  r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004c0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80004c4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80004c8:	20000020 	.word	0x20000020

080004cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <BSP_LED_Init>:
 * Initialize LED pin (PB7) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004d4:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <BSP_LED_Init+0x70>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a19      	ldr	r2, [pc, #100]	; (8000540 <BSP_LED_Init+0x70>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PB7 as output
	GPIOB->MODER &= ~GPIO_MODER_MODER7_Msk;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <BSP_LED_Init+0x74>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <BSP_LED_Init+0x74>)
 80004e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x01 <<GPIO_MODER_MODER7_Pos);
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <BSP_LED_Init+0x74>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a14      	ldr	r2, [pc, #80]	; (8000544 <BSP_LED_Init+0x74>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6013      	str	r3, [r2, #0]

	// Configure PB7 as Push-Pull output
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_7;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <BSP_LED_Init+0x74>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <BSP_LED_Init+0x74>)
 80004fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000502:	6053      	str	r3, [r2, #4]

	// Configure PB7 as High-Speed Output
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR7_Msk;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <BSP_LED_Init+0x74>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <BSP_LED_Init+0x74>)
 800050a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800050e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR7_Pos);
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <BSP_LED_Init+0x74>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <BSP_LED_Init+0x74>)
 8000516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800051a:	6093      	str	r3, [r2, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR7_Msk;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <BSP_LED_Init+0x74>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <BSP_LED_Init+0x74>)
 8000522:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000526:	60d3      	str	r3, [r2, #12]

	// Set Initial State OFF
	GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <BSP_LED_Init+0x74>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <BSP_LED_Init+0x74>)
 800052e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000532:	6193      	str	r3, [r2, #24]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800
 8000544:	40020400 	.word	0x40020400

08000548 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PB7
 */

void BSP_LED_Toggle()
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	GPIOB->ODR ^= GPIO_ODR_ODR_7;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <BSP_LED_Toggle+0x1c>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <BSP_LED_Toggle+0x1c>)
 8000552:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000556:	6153      	str	r3, [r2, #20]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40020400 	.word	0x40020400

08000568 <BSP_DELAY_TIM_init>:
 * Initialize TIM6 with 1ms counting period
 * ARR is set to maximum value -> delay [2ms-65s]
 */

void BSP_DELAY_TIM_init(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	// Enable TIM6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <BSP_DELAY_TIM_init+0x38>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <BSP_DELAY_TIM_init+0x38>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6413      	str	r3, [r2, #64]	; 0x40

	// Reset TIM6 configuration
	TIM6->CR1 = 0x0000;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <BSP_DELAY_TIM_init+0x3c>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
	TIM6->CR2 = 0x0000;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <BSP_DELAY_TIM_init+0x3c>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]

	// Set TIM6 prescaler
	// Fck = 48MHz -> /48000 = 1KHz counting frequency
	TIM6->PSC = (uint16_t) 48000 -1;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <BSP_DELAY_TIM_init+0x3c>)
 8000586:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800058a:	629a      	str	r2, [r3, #40]	; 0x28

	// Set ARR to maximum value
	TIM6->ARR = (uint16_t) 0xFFFF;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <BSP_DELAY_TIM_init+0x3c>)
 800058e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40001000 	.word	0x40001000

080005a8 <BSP_DELAY_TIM_ms>:
 * timer_delay_ms(uint16_t ms)
 * waits here for ms
 */

void BSP_DELAY_TIM_ms(uint16_t ms)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
	// Resets TIM6 counter
	TIM6->EGR |= TIM_EGR_UG;
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]

	// Start TIM6 counter
	TIM6->CR1 |= TIM_CR1_CEN;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]

	// Wait until TIM6 counter reaches delay
	while(TIM6->CNT < ms);
 80005ca:	bf00      	nop
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d3fa      	bcc.n	80005cc <BSP_DELAY_TIM_ms+0x24>

	// Stop TIM6 counter
	TIM6->CR1 &= ~TIM_CR1_CEN;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <BSP_DELAY_TIM_ms+0x48>)
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	6013      	str	r3, [r2, #0]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40001000 	.word	0x40001000

080005f4 <__libc_init_array>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	4e0d      	ldr	r6, [pc, #52]	; (800062c <__libc_init_array+0x38>)
 80005f8:	4c0d      	ldr	r4, [pc, #52]	; (8000630 <__libc_init_array+0x3c>)
 80005fa:	1ba4      	subs	r4, r4, r6
 80005fc:	10a4      	asrs	r4, r4, #2
 80005fe:	2500      	movs	r5, #0
 8000600:	42a5      	cmp	r5, r4
 8000602:	d109      	bne.n	8000618 <__libc_init_array+0x24>
 8000604:	4e0b      	ldr	r6, [pc, #44]	; (8000634 <__libc_init_array+0x40>)
 8000606:	4c0c      	ldr	r4, [pc, #48]	; (8000638 <__libc_init_array+0x44>)
 8000608:	f000 f818 	bl	800063c <_init>
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	10a4      	asrs	r4, r4, #2
 8000610:	2500      	movs	r5, #0
 8000612:	42a5      	cmp	r5, r4
 8000614:	d105      	bne.n	8000622 <__libc_init_array+0x2e>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800061c:	4798      	blx	r3
 800061e:	3501      	adds	r5, #1
 8000620:	e7ee      	b.n	8000600 <__libc_init_array+0xc>
 8000622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000626:	4798      	blx	r3
 8000628:	3501      	adds	r5, #1
 800062a:	e7f2      	b.n	8000612 <__libc_init_array+0x1e>
 800062c:	08000664 	.word	0x08000664
 8000630:	08000664 	.word	0x08000664
 8000634:	08000664 	.word	0x08000664
 8000638:	08000668 	.word	0x08000668

0800063c <_init>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr

08000648 <_fini>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr
